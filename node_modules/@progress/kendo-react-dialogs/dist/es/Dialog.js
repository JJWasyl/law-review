var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { DialogTitleBar } from './DialogTitleBar';
import { DialogActionsBar } from './DialogActionsBar';
import { guid, dispatchEvent, Keys } from '@progress/kendo-react-common';
// tslint:enable:max-line-length
var Dialog = /** @class */ (function (_super) {
    __extends(Dialog, _super);
    function Dialog() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.titleId = _this.generateTitleId();
        _this.handleCloseDialog = function (event) {
            event.preventDefault();
            dispatchEvent(_this.props.onClose, event, _this, undefined);
        };
        _this.handleKeyDown = function (event) {
            if (event.keyCode === Keys.esc && _this.props.onClose) {
                event.preventDefault();
                _this.handleCloseDialog(event);
            }
        };
        return _this;
    }
    /**
     * @hidden
     */
    Dialog.prototype.render = function () {
        var id = this.props.id !== undefined ? this.props.id : this.titleId;
        var _a = this.props, title = _a.title, width = _a.width, height = _a.height, children = _a.children, minWidth = _a.minWidth, dir = _a.dir, style = _a.style, contentStyle = _a.contentStyle;
        var elementsArray = React.Children.toArray(children);
        var content = this.getContent(elementsArray);
        var actions = this.getActionBar(elementsArray);
        var aria = title ? {
            'aria-labelledby': id
        } : null;
        var closeIcon = this.props.closeIcon !== undefined ? this.props.closeIcon : true;
        return (React.createElement("div", { className: 'k-dialog-wrapper' +
                (this.props.className ? ' ' + this.props.className : ''), onKeyDown: this.handleKeyDown, tabIndex: 0, dir: dir, style: style },
            React.createElement("div", { className: "k-overlay" }),
            React.createElement("div", __assign({}, aria, { className: "k-widget k-window k-dialog", role: "dialog", style: { width: width, height: height, minWidth: minWidth } }),
                this.props.title &&
                    React.createElement(DialogTitleBar, { closeIcon: closeIcon, onCloseButtonClick: this.handleCloseDialog, id: id }, title),
                React.createElement("div", { className: "k-content k-window-content k-dialog-content", style: contentStyle }, content),
                actions)));
    };
    Dialog.prototype.getActionBar = function (children) {
        return children.filter(function (child) { return child && child.type === DialogActionsBar; });
    };
    Dialog.prototype.getContent = function (children) {
        return children.filter(function (child) {
            return child && child.type !== DialogActionsBar;
        });
    };
    Dialog.prototype.generateTitleId = function () {
        return 'dialog-title' + guid();
    };
    /**
     * @hidden
     */
    Dialog.propTypes = {
        title: PropTypes.any,
        id: PropTypes.string,
        dir: PropTypes.string,
        style: PropTypes.object,
        closeIcon: PropTypes.bool,
        width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        minWidth: PropTypes.oneOfType([PropTypes.number, PropTypes.string])
    };
    return Dialog;
}(React.Component));
export { Dialog };
//# sourceMappingURL=Dialog.js.map